using Deployf.Botf;
using Newtonsoft.Json;

using WorkHelpBot.Models.Output;

class PromocodeController : BotController
{
	readonly IConfiguration _configuration;
	readonly ILogger _logger;

	public PromocodeController(IConfiguration configuration, ILogger<PromocodeController> logger)
	{
		_configuration = configuration;
		_logger = logger;
	}

	[Action("üéü–ø—Ä–æ–º–æ–∫–æ–¥üéü")]
	public async Task Promocode()
	{
		PushL("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:");
		await Send();

		string promocodeFromUser = await AwaitText();
		PromocodeOutput promocode = null;

		try
		{
			using(var client = new HttpClient())
			{
				var endPoint = new Uri($"{_configuration["apiUrl"]}/promocode/get/{promocodeFromUser}");
				var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
				promocode = JsonConvert.DeserializeObject<PromocodeOutput>(json);

				_logger.LogInformation($"PromocodeController(29): Result: {promocode.Name}");
			}

			if(promocode.ActivatedUserId.Contains($"{FromId}"))
			{
				KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏–±–æ –≤—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü.—Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥");
				await Send();
			}

			if(promocodeFromUser == promocode.Name && !promocode.ActivatedUserId.Contains($"{FromId}") && promocode != null)
			{
				using(var client = new HttpClient())
				{
					var endPoint = new Uri($"{_configuration["apiUrl"]}/promocode/update/{promocodeFromUser}/{FromId}");
					var result = client.PutAsync(endPoint, new StringContent("")).Result.Content.ReadAsStringAsync().Result;

					_logger.LogInformation($"PromocodeController(40): Result: {result}");
				}

				using(var client = new HttpClient())
				{
					var endPoint = new Uri($"{_configuration["apiUrl"]}/user/update-balance/{FromId}/{int.Parse($"{promocode.Bonus}")}");
					var result = client.PutAsync(endPoint, new StringContent("")).Result.Content.ReadAsStringAsync().Result;

					_logger.LogInformation($"PromocodeController(40): Result: {result}");
				}

				KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL($"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å +{promocode.Bonus}–≥—Ä–Ω. /{promocode.Bonus * 1.93}—Ä—É–±.");
				await Send();
			}
		}
		catch(Newtonsoft.Json.JsonReaderException)
		{
			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏–±–æ –≤—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü.—Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥");
			await Send();
		}
	}
}

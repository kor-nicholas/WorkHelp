using Deployf.Botf;
using Telegram.Bot;
using Newtonsoft.Json;

using System;
using System.Text;
using System.Security.Cryptography;
using System.Reflection;
using System.Reflection.Emit;

using WorkHelpBot.Models;
using WorkHelpBot.Models.Input;
using WorkHelpBot.Models.Output;

using WorkHelpBot.Interfaces;

class StartController : BotController
{
	readonly ILogger _logger;
	readonly IConfiguration _configuration;
	readonly IEncodingService _encodingService;

	public StartController(ILogger<StartController> logger, IConfiguration configuration, IEncodingService encodingService)
	{
		_logger = logger;
		_configuration = configuration;
		_encodingService = encodingService;
	}

	
	[Action("/start", "Start Bot")]
	public async Task Start()
	{
		try
		{
			UserOutput user = await GetUserForUserId(FromId);
			await Login(user);
		}
		catch(Newtonsoft.Json.JsonReaderException e)
		{
			await Registration();
			return;
		}
	}

	[Action("/start")]
	public async Task Start(long userId)
	{
		try
		{
			UserOutput user = await GetUserForUserId(FromId);
			await Login(user);
		}
		catch(Newtonsoft.Json.JsonReaderException)
		{
			await Registration();
			
			var reffer = await Client.GetChatMemberAsync(_configuration["channelId"], userId);

			using(var client = new HttpClient())
			{
				var endPoint = new Uri($"{_configuration["apiUrl"]}/user/add-reffer-data");
				var jsonRefferData = JsonConvert.SerializeObject(new RefferalInput { RefferalUserIdTelegram = $"{FromId}", RefferUserIdTelegram = $"{userId}", RefferNicknameTelegram = $"{reffer.User.Username}"});

				var payload = new StringContent(jsonRefferData, System.Text.Encoding.UTF8, "application/json");
				var result = client.PostAsync(endPoint, payload).Result.Content.ReadAsStringAsync().Result;

				_logger.LogInformation($"StartController(55): Result: {result}");
			}

			await Client.SendTextMessageAsync(_configuration["baseId"], $"[Refferals] New refferal: \n@{Context.GetUsername()} ({FromId}) is new refferal for @{reffer.User.Username} ({userId})");
			return;
		}
		catch(Exception e)
		{
			_logger.LogCritical(e.Message);
		}
	}

	// Additional methods
	[Action]
	private async Task<UserOutput> GetUserForUserId(long FromId)
	{
		using(var client = new HttpClient())
		{
			var endPoint = new Uri($"{_configuration["apiUrl"]}/user/get/{FromId}");
			var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
			var result = JsonConvert.DeserializeObject<UserOutput>(json);

			_logger.LogInformation($"StartController(105): Result: {result.Name}");

			return result;
		}
	}

	[Action]
	private async Task Registration()
	{
		PushL("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ");
		await Send();
		var name = await _encodingService.Encode(await AwaitText());

		PushL("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é: ");
		await Send();
		var surName = await _encodingService.Encode(await AwaitText());

		PushL("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ");
		await Send();
		var phone = await AwaitText();
		
		if(!phone.Contains("+"))
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑");
			await Send();

			var callPhone = await AwaitQuery();

			if(callPhone == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await Registration();
				return;
			}
		}

		PushL("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email: ");
		await Send();
		var email = await AwaitText();
		
		if(!email.Contains("@"))
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑");
			await Send();

			var callEmail = await AwaitQuery();

			if(callEmail == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await Registration();
				return;
			}
		}

		PushL("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω: ");
		await Send();
		var login = await AwaitText();

		PushL("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤): ");
		await Send();
		var pass = await AwaitText();

		if(pass.Length < 8)
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
			await Send();

			var againCallBack = await AwaitQuery();

			if(againCallBack == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await Registration();
				return;
			}
		}

		using(var client = new HttpClient())
		{
			var endPoint = new Uri($"{_configuration["apiUrl"]}/user/add");
			var jsonUser = JsonConvert.SerializeObject(new UserInput { Name = name, Surname = surName, Phone = phone, Email = email, UserIdTelegram = $"{FromId}", NicknameTelegram = Context.GetUsername(), Pass = pass, Login = login, Role = "user", Balance = 0, Salt = "", RefferUserIdTelegram = "", RefferNicknameTelegram = "", CompletedTaskCount = 0, RefferalsCount = 0 });
			var payload = new StringContent(jsonUser, System.Text.Encoding.UTF8, "application/json");
			var result = client.PostAsync(endPoint, payload).Result.Content.ReadAsStringAsync().Result;

			_logger.LogInformation($"StartController(129): Result: {result}");
		}

		PushL("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
		await Send();

		UserOutput user = await GetUserForUserId(FromId);
		await Login(user);
	}

	[Action]
	private async Task Login(UserOutput user)
	{
		PushL("–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ");
		await Send();

		PushL("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω: ");
		await Send();
		var login = await AwaitText();

		PushL("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ");
		await Send();
		var pass = await AwaitText();

		if(pass.Length < 8)
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
			await Send();

			var againCallBack = await AwaitQuery();

			if(againCallBack == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await Login(user);
				return;
			}
		}

		int index = Convert.ToInt32($"{user.Salt[user.Salt.Length - 2]}{user.Salt[user.Salt.Length - 1]}");
		pass = pass.Insert(index, user.Salt);
		pass = await HashPass(pass);

		if(user.Login == login && user.Pass == pass && user.UserIdTelegram == $"{FromId}")
		{
			await CheckSubscribe(FromId);
		}
		else
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("Login –∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ (–ª–∏–±–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å —á—É–∂–æ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
			await Send();

			var againCallBack = await AwaitQuery();

			if(againCallBack == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await Login(user);
				return;
			}
		}
	}

	[Action]
	private async Task<string> HashPass(string pass)
	{
		using(var sha256 = SHA256.Create())
		{
			var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(pass));
			var hash = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();

			_logger.LogInformation($"Hash: {hash}");

			return hash;
		}
	}

	[Action]
	private async Task CheckSubscribe(long FromId)
	{
		var chatMember = await Client.GetChatMemberAsync(_configuration["channelId"], FromId);
		string status = chatMember.Status.ToString();
		
		do
		{
			Button("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "https://t.me/free_films_every_day");
			Button("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è");
			PushL("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
			await Send();
				
			var callSubscribe = await AwaitQuery();

			if(callSubscribe == "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
			{
				chatMember = await Client.GetChatMemberAsync(_configuration["channelId"], FromId);
				status = chatMember.Status.ToString();
			}
		}while(status == "Left");
		
		KButton("üë§–ø—Ä–æ—Ñ–∏–ª—åüë§");
		RowKButton("üí∏–∑–∞—Ä–∞–±–æ—Ç–æ–∫üí∏");
		KButton("‚ùóÔ∏è–ø–æ–º–æ—â—å‚ùóÔ∏è");
		RowKButton("üí≥–≤—ã–≤–æ–¥üí≥");
		KButton("üéü–ø—Ä–æ–º–æ–∫–æ–¥üéü");
		RowKButton("ü´Ç—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ü´Ç");
		PushL("–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥üëã. –Ø —Å–º–æ—Ç—Ä—é —Ç—ã —Ç—É—Ç –Ω–æ–≤–µ–Ω—å–∫–∏–π, –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —á—Ç–æ –∫ —á–µ–º—É:\n\nü§ë–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º, –ø—Ä–æ—Å—Ç–æ –ª—ë–∂–∞ –Ω–∞ –¥–∏–≤–∞–Ω–µ;\n\n‚ùóÔ∏è–≠—Ç–æ –Ω–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑–≤–æ–¥ –∏–ª–∏ —Å–∫–∞–º. –í—ã –Ω–µ—Å—ë—Ç–µ –Ω–∞–º –¥–µ–Ω—å–≥–∏ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - –º—ã –æ—Ç–¥–∞—ë–º –≤–∞–º –±–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ü–æ—Ç–æ–º—É –≤—Å–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –≤—ã–≥–æ–¥–µ;\n\nüòç–° –Ω–∞–º–∏ —Ç—ã –±—É–¥–µ—à—å –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ, –∞ –º–æ–∂–µ—Ç –¥–∞–∂–µ –∏ –Ω–µ –∫ –æ–¥–Ω–æ–π!");
		await Send();
	}

	[On(Handle.Unauthorized)]
	public async Task Unauthorized()
	{
		_logger.LogError("StartController(254): Error with Authorizing user");
		PushL("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É");
		await Send();

		await Registration();
	}
}




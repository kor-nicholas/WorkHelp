using Deployf.Botf;
using Newtonsoft.Json;

using WorkHelpBot.Models.Output;
using WorkHelpBot.Models.Input;

class WithdrawalController : BotController
{
	readonly IConfiguration _configuration;
	readonly ILogger<WithdrawalController> _logger;

	public WithdrawalController(IConfiguration configuration, ILogger<WithdrawalController> logger)
	{
		_configuration = configuration;
		_logger = logger;
	}

	[Action("üí≥–≤—ã–≤–æ–¥üí≥")]
	public async Task Withdrawal()
	{
		UserOutput user = null;

		using(var client = new HttpClient())
		{
			var endPoint = new Uri($"{_configuration["apiUrl"]}/user/get/{FromId}");
			var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
			user = JsonConvert.DeserializeObject<UserOutput>(json);

			_logger.LogInformation($"WithdrawalController(26): Result: {user}");
		}

		if(user != null)
		{
			if(user.Balance < 100)
			{
				KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 100–≥—Ä–Ω. / 193—Ä—É–±. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è(–≤ —Ä–∞–∑–¥–∞–ª–µ 'üí∏–∑–∞—Ä–∞–±–æ—Ç–æ–∫üí∏'), –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ª–∏–±–æ –∏—â–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É –Ω–∞—Å –≤ —Å–æ—Ü.—Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
				await Send();
			}
			else if(user.CompletedTaskCount < 2)
			{
				KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 –∑–∞–¥–∞–Ω–∏—è. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 2 –∑–∞–¥–∞–Ω–∏—è(–≤ —Ä–∞–∑–¥–∞–ª–µ 'üí∏–∑–∞—Ä–∞–±–æ—Ç–æ–∫üí∏') –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
				await Send();
			}
			else if(user.RefferalsCount < 3)
			{
				KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
				await Send();
			}
			else
			{
				KButton("–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫");
				KButton("–ú–æ–Ω–æ–ë–∞–Ω–∫");
				RowKButton("Visa/Mastercard");
				RowKButton("Qiwi");
				KButton("–ÆMoney");
				RowKButton("Tinkoff");
				KButton("–ú–∏—Ä");
				KButton("–°–±–µ—Ä–ë–∞–Ω–∫");
				RowKButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL($"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.Balance}\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 100–≥—Ä–Ω. / 193—Ä—É–±.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 10000–≥—Ä–Ω. / 19300—Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞");
				await Send();
			}

		}
		else
		{
			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
			await Send();

			throw new NullReferenceException("WithdrawalController(32): user is null");
		}
	}

	[Action("–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫")]
	[Action("–ú–æ–Ω–æ–ë–∞–Ω–∫")]
	[Action("Visa/Mastercard")]
	[Action("Tinkoff")]
	[Action("–ú–∏—Ä")]
	[Action("–°–±–µ—Ä–ë–∞–Ω–∫")]
	public async Task BankWithdrawal()
	{
		PushL("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ");
		await Send();
		double cardNumber = 0;

		try
		{
			cardNumber = double.Parse(await AwaitText());
		}
		catch(FormatException)
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
			await Send();

			var callCardNumber = await AwaitQuery();

			if(callCardNumber == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await BankWithdrawal();
				return;
			}
		}

		PushL("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞(–≤ –≥—Ä–Ω): ");
		await Send();
		int sum = 0;

		try
		{
			sum = int.Parse(await AwaitText());
		}
		catch(FormatException)
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–°—É–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
			await Send();

			var callSum = await AwaitQuery();

			if(callSum == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await BankWithdrawal();
				return;
			}
		}
		
		using(var client = new HttpClient())
		{
			var endPoint = new Uri($"{_configuration["apiUrl"]}/user/get/{FromId}");
			var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
			UserOutput user = JsonConvert.DeserializeObject<UserOutput>(json);

			_logger.LogInformation($"WithdrawalController(64): Result: {user}");

			if(sum > user.Balance)
			{
				RowKButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
				await Send();
			}
			else
			{
				using(var client2 = new HttpClient())
				{
					var endPoint2 = new Uri($"{_configuration["apiUrl"]}/user/update");
					var jsonUser = JsonConvert.SerializeObject(new UserInput { Id = user.Id,
																	Name = user.Name,
																	Surname = user.Surname,
																	Phone = user.Phone,
																	Email = user.Email,
																	UserIdTelegram = user.UserIdTelegram,
																	NicknameTelegram = user.NicknameTelegram,
																	Pass = user.Pass,
																	Login = user.Login,
																	Role = user.Role,
																	Balance = user.Balance - sum,
																	Salt = user.Salt,
																	RefferUserIdTelegram = user.RefferUserIdTelegram,
																	RefferNicknameTelegram = user.RefferNicknameTelegram,
																	CompletedTaskCount = user.CompletedTaskCount,
																	RefferalsCount = user.RefferalsCount});
					var payload = new StringContent(jsonUser, System.Text.Encoding.UTF8, "application/json");
					var result = client2.PutAsync(endPoint2, payload).Result.Content.ReadAsStringAsync().Result;

					_logger.LogInformation($"Result: {result}");
				}

				RowKButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π");
				await Send();
			}
		}
	}

	[Action("Qiwi")]
	[Action("–ÆMoney")]
	public async Task BillWithdrawal()
	{
		PushL("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/—Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ");
		await Send();
		var billNumber = await AwaitText();

		PushL("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞(–≤ –≥—Ä–Ω): ");
		await Send();
		int sum = 0;

		try
		{
			sum = int.Parse(await AwaitText());
		}
		catch(FormatException)
		{
			Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			PushL("–°—É–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
			await Send();

			var callSum = await AwaitQuery();

			if(callSum == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
			{
				await BankWithdrawal();
				return;
			}
		}

		using(var client = new HttpClient())
		{
			var endPoint = new Uri($"{_configuration["apiUrl"]}/user/get/{FromId}");
			var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
			UserOutput user = JsonConvert.DeserializeObject<UserOutput>(json);

			if(sum > user.Balance)
			{
				RowKButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
				await Send();
			}
			else
			{
				using(var client2 = new HttpClient())
				{
					var endPoint2 = new Uri($"{_configuration["apiUrl"]}/user/update");
					var jsonUser = JsonConvert.SerializeObject(new UserInput { Id = user.Id,
																	Name = user.Name,
																	Surname = user.Surname,
																	Phone = user.Phone,
																	Email = user.Email,
																	UserIdTelegram = user.UserIdTelegram,
																	NicknameTelegram = user.NicknameTelegram,
																	Pass = user.Pass,
																	Login = user.Login,
																	Role = user.Role,
																	Balance = user.Balance - sum,
																	Salt = user.Salt,
																	RefferUserIdTelegram = user.RefferUserIdTelegram,
																	RefferNicknameTelegram = user.RefferNicknameTelegram,
																	CompletedTaskCount = user.CompletedTaskCount,
																	RefferalsCount = user.RefferalsCount});
					var payload = new StringContent(jsonUser, System.Text.Encoding.UTF8, "application/json");
					var result = client2.PutAsync(endPoint2, payload).Result.Content.ReadAsStringAsync().Result;

					_logger.LogInformation($"Result: {result}");
				}

				RowKButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
				PushL("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π");
				await Send();
			}
		}
	}
}

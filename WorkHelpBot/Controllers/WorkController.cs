using Deployf.Botf;
using Newtonsoft.Json;

using Telegram.Bot;
using Telegram.Bot.Types.Enums;

using WorkHelpBot.Models.Output;
using WorkHelpBot.Models.Input;

using WorkHelpBot.Interfaces;

class WorkController : BotController
{
	readonly ILogger _logger;
	readonly IConfiguration _configuration;
	readonly MessageSender _sender;
	readonly IEncodingService _encodingService;
	
	public WorkController(ILogger<WorkController> logger, IConfiguration configuration, MessageSender sender, IEncodingService encodingService)
	{
		_logger = logger;
		_configuration = configuration;
		_sender = sender;
		_encodingService = encodingService;
	}

	[Action]
	public async Task Main()
	{
		KButton("üë§–ø—Ä–æ—Ñ–∏–ª—åüë§");
		RowKButton("üí∏–∑–∞—Ä–∞–±–æ—Ç–æ–∫üí∏");
		KButton("‚ùóÔ∏è–ø–æ–º–æ—â—å‚ùóÔ∏è");
		RowKButton("üí≥–≤—ã–≤–æ–¥üí≥");
		KButton("üéü–ø—Ä–æ–º–æ–∫–æ–¥üéü");
		RowKButton("ü´Ç—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ü´Ç");
		PushL("–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:");
		await Send();
	}
	
	[Action("üí∏–∑–∞—Ä–∞–±–æ—Ç–æ–∫üí∏")]
	public async Task Work()
	{
		KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
		PushL("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: ");
		await Send();

		Button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
		/* Button("–ò–≥—Ä—ã"); */
		/* RowButton("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã"); */
		Button("–ö—Ä–µ–¥–∏—Ç—ã");
		/* RowButton("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"); */
		RowButton("–í–≤–æ–¥–Ω–∏–π —É—Ä–æ–∫");
		Button("Redsurf");
		PushL("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—Ä–∞–±–æ—Ç–∫–∞:");
		await Send();

		var update = await AwaitNextUpdate();

		if(update.Update.Type == UpdateType.CallbackQuery)
		{
			var works = await SetWorks();
			works = works.Where(work => work.Category == $"{update.Update.CallbackQuery.Data.ToString()}").ToList();
				
			foreach(var work in works)
			{
				AState(work);
				Button("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", Q(CallbackWorkHandler, work));
				PushL($"<b>{work.Name}</b>\n\n{work.Description}\n\n–û–ø–ª–∞—Ç–∞: {work.Price}–≥—Ä–Ω. /{work.Price * 1.93}—Ä—É–±.");
				await Send();
			}
		}
		else if(update.Update.Type == UpdateType.Message)
		{
			await Main();
		}
	}
		
	[Action]
	public async Task Registration([State] WorkOutput work)
	{
		await AState(work);

		Button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", work.Link);
		RowButton("–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è");
		RowButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ");
		PushL("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø–æ—Å—Ç—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ");
		await Send();

		var callRegisterInRegistration = await AwaitQuery();

		if (callRegisterInRegistration == "–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
		{
			string email = null;
			string nameSurname = null;
			int age = 0;

			PushL("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ: ");
			await Send();
			email = await AwaitText();

			if(!email.Contains("@"))
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ");
				await Send();

				var callEmail = await AwaitQuery();

				if(callEmail == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await Registration(work);
					return;
				}
			}

			PushL("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ: ");
			await Send();
			nameSurname = await AwaitText();

			PushL("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ: ");
			await Send();

			try
			{
				age = int.Parse(await AwaitText());
			}
			catch(FormatException)
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
				await Send();

				var callAge = await AwaitQuery();

				if(callAge == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await Registration(work);
					return;
				}
			}

			await AState(work);

			var msg = new MessageBuilder()
					.Button("–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", Q(CallbackAcceptWorkHandler, "yes", FromId, work.Price))
					.Button("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", Q(CallbackAcceptWorkHandler, "no", FromId, work.Price))
					.SetChatId(long.Parse(_configuration["baseId"]))
					.PushL($"[Registration] @{Context.GetUsername()} registered in familiarity\n\nName and Surname: {nameSurname}\nAge: {age}\nEmail: {email}");

			await _sender.Send(msg);

			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–¥–æ 24 —á–∞—Å–æ–≤), –ø–æ–∫–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É\n\n–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è");
			await Send();
		}
		else if(callRegisterInRegistration == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
		{
			await Main();
		}
		else
		{
			throw new Exception("WorkController(87): Problem with callback");
		}
	}

	[Action]
	public async Task BankCards([State] WorkOutput work)
	{
		KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
		PushL("–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
		await Send();
	}

	[Action]
	public async Task Verification([State] WorkOutput work)
	{
		/* Button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", "https://t.me/free_films_every_day/58"); */
		/* RowButton("–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è"); */
		/* PushL("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø–æ—Å—Ç—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ"); */
		/* await Send(); */

		/* var callRegister = await AwaitQuery(); */

		/* if (callRegister == "–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è") */
		/* { */
		/* 	Button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–Ω—É–∞–ª", "https://telegra.ph"); */
		/* 	RowButton("–Ø –∑–∞–∫–æ–Ω—á–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"); */
		/* 	PushL("–ü—Ä–∏–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –º–∞–Ω—É–∞–ª–µ"); */
		/* 	await Send(); */

		/* 	var callVarification = await AwaitQuery(); */

		/* 	if (callVarification == "–Ø –∑–∞–∫–æ–Ω—á–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é") */
		/* 	{ */
		/* 		PushL("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ login:pass): "); */
		/* 		await Send(); */

		/* 		var dataEmail = await AwaitText(); */

		/* 		PushL("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ CoinList(–≤ —Ñ–æ—Ä–º–∞—Ç–µ login:pass): "); */
		/* 		await Send(); */

		/* 		var dataCoinList = await AwaitText(); */

		/* 		var chatMember = await Client.GetChatMemberAsync(-1001696554718, FromId); */
		/* 		await Client.SendTextMessageAsync(-726773196, $"[Verification] @{chatMember.User.Username} complete verification\n\nEmail: {dataEmail}\nCoinList: {dataCoinList}"); */
		/* 	} */
		/* } */

		/* KButton("–ù–∞–∑–∞–¥"); */
		/* PushL("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥!"); */

		KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
		PushL("–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
		await Send();
	}

	[Action]
	public async Task Credits([State] WorkOutput work)
	{
		await AState(work);

		Button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", work.Link);
		RowButton("–Ø –æ—Ñ–æ—Ä–º–∏–ª –∫—Ä–µ–¥–∏—Ç –∏ –ø–æ–ª—É—á–∏–ª –¥–µ–Ω—å–≥–∏");
		RowButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ");
		PushL("–ü—Ä–∏–π–¥–∏—Ç–µ –∫ –ø–æ—Å—Ç—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç");
		await Send();

		var callCredit = await AwaitQuery();

		if(callCredit == "–Ø –æ—Ñ–æ—Ä–º–∏–ª –∫—Ä–µ–¥–∏—Ç –∏ –ø–æ–ª—É—á–∏–ª –¥–µ–Ω—å–≥–∏")
		{
			string nameAndSurname = null;
			string phone = null;
			string email = null;

			PushL("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –∑–∞—è–≤–∫–µ: ");
			await Send();
			nameAndSurname = await AwaitText();

			PushL("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ: ");
			await Send();
			phone = await AwaitText();

			if(!phone.Contains("+"))
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ");
				await Send();

				var callPhone = await AwaitQuery();

				if(callPhone == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await Credits(work);
					return;
				}
			}

			PushL("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –∑–∞—è–≤–∫–µ: ");
			await Send();
			email = await AwaitText();

			if(!email.Contains("@"))
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ");
				await Send();

				var callEmail = await AwaitQuery();

				if(callEmail == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await Credits(work);
					return;
				}
			}

			await AState(work);

			var msg = new MessageBuilder()
					.Button("–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", Q(CallbackAcceptWorkHandler, "yes", FromId, work.Price))
					.Button("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", Q(CallbackAcceptWorkHandler, "no", FromId, work.Price))
					.SetChatId(long.Parse(_configuration["baseId"]))
					.PushL($"[Credits] @{Context.GetUsername()} take credit: \n\nName and Surname: {nameAndSurname}\nPhone: {phone}\nEmail: {email}");
			await _sender.Send(msg);

			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–¥–æ 24 —á–∞—Å–æ–≤), –ø–æ–∫–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É\n\n–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è");
			await Send();
		}
		else if(callCredit == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
		{
			await Main();
		}
		else
		{
			throw new Exception("WorkController(187): Problem with callback");
		}
	}

	[Action]
	public async Task Study([State] WorkOutput work)
	{
		await AState(work);

		Button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", work.Link);
		RowButton("–Ø –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫");
		RowButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ");
		PushL("–ü—Ä–∏–π–¥–∏—Ç–µ –∫ –ø–æ—Å—Ç—É –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫");
		await Send();

		var callStudy = await AwaitQuery();

		if(callStudy == "–Ø –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫")
		{
			string name = null;
			string phone = null;
			string email = null;

			PushL("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –∑–∞—è–≤–∫–µ: ");
			await Send();
			name = await AwaitText();

			PushL("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ: ");
			await Send();
			phone = await AwaitText();

			if(!phone.Contains("+"))
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ");
				await Send();

				var callPhone = await AwaitQuery();

				if(callPhone == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await Study(work);
					return;
				}
			}

			PushL("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –∑–∞—è–≤–∫–µ: ");
			await Send();
			email = await AwaitText();

			if(!email.Contains("@"))
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ");
				await Send();

				var callEmail = await AwaitQuery();

				if(callEmail == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await Study(work);
					return;
				}
			}

			await Client.SendTextMessageAsync(_configuration["baseId"], $"[Study] @{Context.GetUsername()} signed up for course: \n\nName: {name}\nPhone: {phone}\nEmail: {email}");
			PushL("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫ c –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendstudy, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–ª–∞—Ç—É (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ - –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 10%)");
			await Send();
		}
		else if(callStudy == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
		{
			await Main();
		}
		else
		{
			throw new Exception("WorkController(238): Problem with callback");
		}
	}

	[Action("/sendstudy")]
	public async Task SendStudy()
	{
		var msg = new MessageBuilder()
			.Button("–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", Q(CallbackAcceptWorkHandler, "yes", FromId, 14))
			.Button("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", Q(CallbackAcceptWorkHandler, "no", FromId, 14))
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL($"[Study] @{Context.GetUsername()} passed trial lesson");

		await _sender.Send(msg);

		KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
		PushL("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–¥–æ 24 —á–∞—Å–æ–≤), –ø–æ–∫–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É\n\n–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è");
		await Send();
	}

	[Action]
	public async Task GamesAndApps([State] WorkOutput work)
	{
		AState(work);

		Button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", work.Link);
		RowButton("–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–ª–∞—Å—å)");
		RowButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ");
		PushL("–ü—Ä–∏–π–¥–∏—Ç–µ –∫ –ø–æ—Å—Ç—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∏–≥—Ä–µ");
		await Send();

		var callGame = await AwaitQuery();

		if(callGame == "–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–ª–∞—Å—å)")
		{
			string nickName = null;
			string email = null;

			PushL("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ");
			await Send();
			nickName = await AwaitText();

			PushL("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ");
			await Send();
			email = await AwaitText();

			if(!email.Contains("@"))
			{
				Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É");
				PushL("–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ");
				await Send();

				var callEmail = await AwaitQuery();

				if(callEmail == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É")
				{
					await GamesAndApps(work);
					return;
				}
			}

			await Client.SendTextMessageAsync(_configuration["baseId"], $"[GamesAndApps] @{Context.GetUsername()} signed up in game: \n\nNickName: {nickName}\nEmail: {email}");
			PushL("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø–æ–∏–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É –Ω–∞ –ø—Ä–æ—Ç–∏—è–∂–µ–Ω–∏–∏ 7 –¥–Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç—É (–≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendphotogame, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç");
			await Send();
		}
		else if(callGame == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
		{
			await Main();
		}
		else
		{
			throw new Exception("WorkController(303): Problem with callback");
		}
	}

	[Action("/sendphotogame")]
	public async Task SendPhotoGame()
	{
		KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
		PushL("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è, –≥–¥–µ –≤–∏–¥–Ω–æ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
		await Send();

		var update = await AwaitNextUpdate();

		if(update.Update.Message.Photo[0].FileId != "")
		{
			var msg = new MessageBuilder()
				.Button("–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", Q(CallbackAcceptWorkHandler, "yes", FromId, 15))
				.Button("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", Q(CallbackAcceptWorkHandler, "no", FromId, 15))
				.SetChatId(long.Parse(_configuration["baseId"]))
				.PushL($"[GamesAndApps] @{Context.GetUsername()} complete play for 7 days")
				.SetPhotoUrl(update.Update.Message.Photo[0].FileId);

			await _sender.Send(msg);

			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–¥–æ 24 —á–∞—Å–æ–≤), –ø–æ–∫–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É\n\n–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è");
			await Send();
		}
		else
		{
			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
			await Send();
		}
	}

	[Action]
	public async Task Redsurf([State] WorkOutput work)
	{
		AState(work);

		RowButton("–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–ª–∞—Å—å)");
		RowButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ");
		PushL("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ <a href='http://redsurf.ru/?r=334692'>—Å–∞–π—Ç–µ</a>");
		await Send();

		var callRedsurf = await AwaitQuery();

		if(callRedsurf == "–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–ª–∞—Å—å)")
		{
			PushL("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º/email, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ");
			await Send();
			var nickNameOrEmail = await AwaitText();

			await Client.SendTextMessageAsync(_configuration["baseId"], $"[Redsurf] @{Context.GetUsername()} signed up in Redsurf: \n\nNickName/Email: {nickNameOrEmail}");
			PushL("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendredsurf, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–ª–∞—Ç—É (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: 0.01–≥—Ä–Ω./0.0193—Ä—É–±. –∑–∞ 1 –∫—Ä–µ–¥–∏—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 100 –∫—Ä–µ–¥–∏—Ç–æ–≤(–±–æ–ª—å—à–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã–º 100))");
			await Send();
		}
		else if(callRedsurf == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
		{
			await Main();
		}
		else
		{
			throw new Exception("WorkController(372): Problem with callback");
		}
	}

	[Action("/sendredsurf")]
	public async Task SendRedsurf()
	{
		PushL("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É");
		await Send();

		PushL("–í–≤–µ–¥–∏—Ç–µ login/email: ");
		await Send();
		var loginOrEmail = await AwaitText();

		PushL("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
		await Send();
		var pass = await AwaitText();

		PushL("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤(—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã–º 100): ");
		await Send();

		int countCredits = 0;

		try
		{
			countCredits = int.Parse(await AwaitText());
		}
		catch(FormatException)
		{
			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /sendredsurf –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑");
			await Send();
			return;
		}

		if(countCredits % 100 != 0)
		{
			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–ß–∏—Å–ª–æ –Ω–µ –∫—Ä–∞—Ç–Ω–æ–µ 100 (100, 200, 300, ...). –ù–∞–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 100 –∫—Ä–µ–¥–∏—Ç–æ–≤, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—É /sendredsurf –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑");
			await Send();
			return;
		}
		else
		{
			int price = countCredits / 100;

			var msg = new MessageBuilder()
				.Button("–ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", Q(CallbackAcceptWorkHandler, "yes", FromId, price))
				.Button("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", Q(CallbackAcceptWorkHandler, "no", FromId, price))
				.SetChatId(long.Parse(_configuration["baseId"]))
				.PushL($"[Redsurf] @{Context.GetUsername()} want sell {countCredits} for {price}–≥—Ä–Ω. / {price * 1.93}—Ä—É–±. ({loginOrEmail}:{pass})");

			await _sender.Send(msg);

			KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥");
			PushL("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–¥–æ 24 —á–∞—Å–æ–≤), –ø–æ–∫–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É\n\n–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è");
			await Send();
		}
	}

	// More methods
	[Action]
	public async Task<List<WorkOutput>> SetWorks()
	{
		using(var client = new HttpClient())
		{
			try
			{
				var endPoint = new Uri($"{_configuration["apiUrl"]}/work/works");
				var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
				var result = JsonConvert.DeserializeObject<List<WorkOutput>>(json);

				foreach(var item in result)
				{
					item.Category = await _encodingService.Decode(item.Category);
					item.Name = await _encodingService.Decode(item.Name);
					item.Description = await _encodingService.Decode(item.Description);
				}

				return result;
			}
			catch(NullReferenceException)
			{
				return new List<WorkOutput>();
			}
			catch(ArgumentNullException)
			{
				return new List<WorkOutput>();
			}
		}
	}
	
	[Action]
	public async Task CallbackWorkHandler([State] WorkOutput work)
	{
		if(work.Category == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
		{
			await Registration(work);
		}
		else if(work.Category == "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã")
		{
			await BankCards(work);
		}
		else if(work.Category == "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
		{
			await Verification(work);
		}
		else if(work.Category == "–ö—Ä–µ–¥–∏—Ç—ã")
		{
			await Credits(work);
		}
		else if(work.Category == "–í–≤–æ–¥–Ω–∏–π —É—Ä–æ–∫")
		{
			await Study(work);
		}
		else if(work.Category == "–ò–≥—Ä—ã")
		{
			await GamesAndApps(work);
		}
		else if(work.Category == "Redsurf")
		{
			await Redsurf(work);
		}
		else
		{
			_logger.LogError("WorkController(304): CallbackWorkHandler: callback not find");
		}
	}

	[Action]
	public async Task CallbackAcceptWorkHandler(string accept, long userId, int price)
	{
		if(accept == "yes")
		{
			UserOutput user = null;
			UserOutput refer = null;

			using(var client = new HttpClient())
			{
				var endPoint = new Uri($"{_configuration["apiUrl"]}/user/get/{userId}");
				var json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
				user = JsonConvert.DeserializeObject<UserOutput>(json);

				_logger.LogInformation($"WorkController(351): Result: {user}");

				if(user.RefferUserIdTelegram != "" && user.RefferNicknameTelegram != "")
				{
					endPoint = new Uri($"{_configuration["apiUrl"]}/user/get/{user.RefferUserIdTelegram}");
					json = client.GetAsync(endPoint).Result.Content.ReadAsStringAsync().Result;
					refer = JsonConvert.DeserializeObject<UserOutput>(json);

					_logger.LogInformation($"WorkController(359): Result: {refer}");
				}
			}

			_logger.LogInformation($"price: {price}");

			using(var client = new HttpClient())
			{
				var endPoint = new Uri($"{_configuration["apiUrl"]}/user/update");
				var jsonUser = JsonConvert.SerializeObject(new UserOutput {Name = user.Name, Surname = user.Surname, Phone = user.Phone, Email = user.Email, UserIdTelegram = user.UserIdTelegram, NicknameTelegram = user.NicknameTelegram, Pass = user.Pass, Login = user.Login, Role = user.Role, Balance = user.Balance + price, Salt = user.Salt, RefferUserIdTelegram = user.RefferUserIdTelegram, RefferNicknameTelegram = user.RefferNicknameTelegram, CompletedTaskCount = user.CompletedTaskCount + 1, RefferalsCount = user.RefferalsCount});
				var payload = new StringContent(jsonUser, System.Text.Encoding.UTF8, "application/json");
				var result = client.PutAsync(endPoint, payload).Result.Content.ReadAsStringAsync().Result;

				_logger.LogInformation($"WorkController(371): Result: {result}");
			}

			if(refer != null)
			{
				using(var client = new HttpClient())
				{
					var endPoint = new Uri($"{_configuration["apiUrl"]}/user/update");
					var jsonUser = JsonConvert.SerializeObject(new UserOutput {Name = refer.Name, Surname = refer.Surname, Phone = refer.Phone, Email = refer.Email, UserIdTelegram = refer.UserIdTelegram, NicknameTelegram = refer.NicknameTelegram, Pass = refer.Pass, Login = refer.Login, Role = refer.Role, Balance = refer.Balance + price * int.Parse(_configuration["refferalProcent"]) / 100, Salt = refer.Salt, RefferUserIdTelegram = refer.RefferUserIdTelegram, RefferNicknameTelegram = refer.RefferNicknameTelegram, CompletedTaskCount = refer.CompletedTaskCount, RefferalsCount = refer.RefferalsCount});
					var payload = new StringContent(jsonUser, System.Text.Encoding.UTF8, "application/json");
					var result = client.PutAsync(endPoint, payload).Result.Content.ReadAsStringAsync().Result;

					_logger.LogInformation($"WorkController(383): Result: {result}");
				}

				using(var client = new HttpClient())
				{
					var endPoint = new Uri($"{_configuration["apiUrl"]}/refferal/add");
					var jsonRefferal = JsonConvert.SerializeObject(new RefferalInput { RefferUserIdTelegram = refer.UserIdTelegram, RefferNicknameTelegram = refer.NicknameTelegram, RefferalUserIdTelegram = user.UserIdTelegram, RefferalNicknameTelegram = user.NicknameTelegram, Earned = price * int.Parse(_configuration["refferalProcent"]) / 100 });
					var payload = new StringContent(jsonRefferal, System.Text.Encoding.UTF8, "application/json");
					var result = client.PostAsync(endPoint, payload).Result.Content.ReadAsStringAsync().Result;

					_logger.LogInformation($"WorkController(393): Result: {result}");
				}
			}

			var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É\n\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.Balance + price}–≥—Ä–Ω. /{(user.Balance + price) * 1.93}—Ä—É–±.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥");

			await _sender.Send(msg);
		}
		else if(accept == "no")
		{
			PushL($"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏—è: /reason {userId} [—Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –¥–æ 10 —Å–ª–æ–≤]");
			await Send();
		}
		else
		{
			throw new Exception("CallbackAcceptWorkHandler: accept not set");
		}
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3, string reason4)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3} {reason4}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3, string reason4, string reason5)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3} {reason4} {reason5}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3, string reason4, string reason5, string reason6)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3} {reason4} {reason5} {reason6}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3, string reason4, string reason5, string reason6, string reason7)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3} {reason4} {reason5} {reason6} {reason7}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3, string reason4, string reason5, string reason6, string reason7, string reason8)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3} {reason4} {reason5} {reason6} {reason7} {reason8}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}

	[Action("/reason")]
	public async Task Reason(long userId, string reason, string reason1, string reason2, string reason3, string reason4, string reason5, string reason6, string reason7, string reason8, string reason9)
	{
		var msg = new MessageBuilder()
				.KButton("‚¨ÖÔ∏è–Ω–∞–∑–∞–¥")
				.SetChatId(userId)
				.PushL($"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} {reason1} {reason2} {reason3} {reason4} {reason5} {reason6} {reason7} {reason8} {reason9}\n\n–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ");

		await _sender.Send(msg);

		msg = new MessageBuilder()
			.SetChatId(long.Parse(_configuration["baseId"]))
			.PushL("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

		await _sender.Send(msg);
	}
}









